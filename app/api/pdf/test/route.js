import { NextResponse } from "next/server";
import chromium from "@sparticuz/chromium";
import puppeteer from "puppeteer-core";

export const maxDuration = 60;

export async function GET() {
  let browser;

  try {
    // Configure browser for serverless environment
    const executablePath = await chromium.executablePath();

    browser = await puppeteer.launch({
      args: chromium.args,
      defaultViewport: chromium.defaultViewport,
      executablePath,
      headless: chromium.headless,
      ignoreHTTPSErrors: true,
    });

    const page = await browser.newPage();

    // Create a simple HTML page
    await page.setContent(`
      <!DOCTYPE html>
      <html>
        <head>
          <title>PDF Test</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 40px;
              line-height: 1.6;
            }
            h1 {
              color: #4A90E2;
              text-align: center;
            }
            .content {
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
              border: 1px solid #ddd;
              border-radius: 5px;
            }
            .footer {
              text-align: center;
              margin-top: 30px;
              font-size: 12px;
              color: #666;
            }
          </style>
        </head>
        <body>
          <h1>PDF Generation Test</h1>
          <div class="content">
            <p>This is a test PDF generated by Puppeteer in a serverless environment.</p>
            <p>If you can see this PDF, the PDF generation service is working correctly.</p>
            <p>Generated at: ${new Date().toLocaleString()}</p>
          </div>
          <div class="footer">
            <p>Test PDF - Repospector</p>
          </div>
        </body>
      </html>
    `);

    // Generate PDF
    const pdfBuffer = await page.pdf({
      format: "A4",
      printBackground: true,
      margin: {
        top: "20mm",
        right: "20mm",
        bottom: "20mm",
        left: "20mm",
      },
    });

    // Close browser
    await browser.close();

    // Return PDF as response
    return new NextResponse(pdfBuffer, {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": 'attachment; filename="test.pdf"',
      },
    });
  } catch (error) {
    // Make sure to close the browser in case of error
    if (browser) {
      await browser.close();
    }

    console.error("Error generating test PDF:", error);
    return NextResponse.json(
      {
        error:
          "Failed to generate test PDF: " + (error.message || "Unknown error"),
      },
      { status: 500 }
    );
  }
}
